The precedence of AND && is higher than ||, so it executes first.
result = value1 || value2 || value3;
The OR || operator does the following:

    Evaluates operands from left to right.
    For each operand, converts it to boolean. If the result is true, stops and returns the original value of that operand.
    If all operands have been evaluated (i.e. all were false), returns the last operand.
alert( 1 || 0 ); // 1 (1 is truthy)

alert( null || 1 ); // 1 (1 is the first truthy value)
alert( null || 0 || 1 ); // 1 (the first truthy value)

alert( undefined || null || 0 ); // 0 (all falsy, returns the last value)

***result = func1 || func2|| func3
function func1(){
    return null;
}
function func2(){
    
}
function func3(x){
    return 3+x;
}
function result(y){
    return func1()||func2()||func3(y)||4;
}
result(2);
5
result(-3);
4
---------------------------------------------------------------------------------------
result = value1 && value2 && value3;
The AND && operator does the following:

    Evaluates operands from left to right.
    For each operand, converts it to a boolean. If the result is false, stops and returns the original value of that operand.
    If all operands have been evaluated (i.e. all were truthy), returns the last operand.

In other words, AND returns the first falsy value or the last value if none were found.
// if the first operand is truthy,
// AND returns the second operand:
alert( 1 && 0 ); // 0
alert( 1 && 5 ); // 5

// if the first operand is falsy,
// AND returns it. The second operand is ignored
alert( null && 5 ); // null
alert( 0 && "no matter what" ); // 0


function func1(){
    return null;
}
function func2(){
    
}
function func3(x){
    return 3+x;
}
result= func3(-1)&&func2()&&func1();//undefined
