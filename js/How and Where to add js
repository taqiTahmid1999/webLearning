Great to hear that you're learning JavaScript! Let's tackle your questions one by one.

### 1. Adding JavaScript to HTML

There are several ways to add JavaScript to an HTML document:

#### Inline JavaScript

You can add JavaScript directly within HTML elements using the `onclick`, `onchange`, and other event attributes.

```html
<!DOCTYPE html>
<html>
<head>
    <title>Inline JavaScript Example</title>
</head>
<body>
    <button onclick="alert('Hello, World!')">Click Me</button>
</body>
</html>
```

#### Internal JavaScript

You can include JavaScript within the `<script>` tags inside the `<head>` or `<body>` of your HTML document.

```html
<!DOCTYPE html>
<html>
<head>
    <title>Internal JavaScript Example</title>
    <script>
        function showMessage() {
            alert('Hello, World!');
        }
    </script>
</head>
<body>
    <button onclick="showMessage()">Click Me</button>
</body>
</html>
```

#### External JavaScript

You can create a separate JavaScript file and link it to your HTML document using the `<script>` tag with the `src` attribute. This is the most common and recommended way to add JavaScript.

**index.html:**
```html
<!DOCTYPE html>
<html>
<head>
    <title>External JavaScript Example</title>
    <script src="script.js" defer></script>
</head>
<body>
    <button onclick="showMessage()">Click Me</button>
</body>
</html>
```

**script.js:**
```js
function showMessage() {
    alert('Hello, World!');
}
```

The `defer` attribute ensures that the script runs after the HTML document has been fully parsed.

### 2. Caching JavaScript in the Browser

Browsers cache JavaScript files to improve performance. When a JavaScript file is cached, the browser stores a copy of it locally, so it doesn't need to download the file again on subsequent page loads.

#### Benefits of Caching

- **Reduced Load Time:** Cached files load faster because they are retrieved from the local cache instead of being downloaded again from the server.
- **Reduced Server Load:** Caching reduces the number of requests made to the server, which can improve the server's performance.

#### Making the Most of Cached JavaScript

To fully benefit from caching, you can use techniques like setting appropriate cache headers and using cache-busting strategies.

##### Setting Cache Headers

On the server, you can set HTTP headers to control how your JavaScript files are cached. Common headers include `Cache-Control` and `Expires`.

- **Cache-Control:** This header can specify how long the file should be cached. For example, `Cache-Control: max-age=31536000` will cache the file for one year.
- **Expires:** This header specifies an exact date and time when the file should be considered expired.

##### Example (Apache Configuration):
```apache
<FilesMatch "\.(js|css|png|jpg|jpeg|gif|ico)$">
    ExpiresActive On
    ExpiresDefault "access plus 1 year"
</FilesMatch>
```

##### Cache-Busting

To ensure that users get the latest version of a file when it changes, you can use cache-busting techniques, such as including a version number or a hash in the file name.

- **Query String:** Append a version number or a hash to the file URL. For example, `script.js?v=1.0`.
- **File Name:** Change the file name whenever the content changes. For example, `script.1a2b3c.js`.

##### Example:
```html
<!DOCTYPE html>
<html>
<head>
    <title>Cache Busting Example</title>
    <script src="script.js?v=1.0" defer></script>
</head>
<body>
    <button onclick="showMessage()">Click Me</button>
</body>
</html>
```

By following these practices, you can ensure that your JavaScript files are efficiently cached while still ensuring that users receive the most up-to-date versions when changes are made.
